name: Creating plugin package in main branch

on:
  push:
    branches:
      - main

jobs:
  create-package:
    runs-on: ubuntu-22.04
    container:
      image: qgis/qgis:release-3_30
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fix Python command
        run: apt-get install python-is-python3

      - name: Install python
        uses: actions/setup-python@v4

      - name: Install plugin dependencies
        run: pip install -r requirements-dev.txt

      - name: Get unique identifier
        id: get-identifier
        run: |
          echo "::set-output name=PACKAGE_ID::$(python -c "import uuid; print(str(uuid.uuid4())[:4])")"

      - name: Generate zip file
        run: |
          python admin.py build --output-directory ${{ format(
          'docs/plugin/package/cplus_plugin_main_{0}/cplus_plugin/',
          steps.get-identifier.outputs.PACKAGE_ID) }}

      - name: Plugin path details
        id: get-zip-details
        run: |
          echo "::set-output name=ZIP_PATH::docs/plugin/package/$(ls docs/plugin/package)\n"
          echo "::set-output name=ZIP_NAME::$(ls docs/plugin/package)"

      - name: Uploading plugin build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get-zip-details.outputs.ZIP_NAME }}
          path: ${{ steps.get-zip-details.outputs.ZIP_PATH }}

      - name: Get artifact and push info
        env:
          GITHUB_TOKEN: ${{ github.token }}
          EVENT_OBJ: ${{ toJSON(github.event) }}
          PUSH_EVENT_OBJ: ${{ toJSON(github.event.push_event) }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          ZIP_FILENAME: ${{ steps.get-zip-details.outputs.ZIP_NAME }}
        run: |
          CURRENT_JOB_ID=$(jq -r '.id' <<< "$EVENT_OBJ")

          echo "Previous Job ID: $CURRENT_JOB_ID"
          echo "CURRENT_JOB_ID=$CURRENT_JOB_ID" >> "$GITHUB_ENV"

          SUITE_ID=$(jq -r '.check_suite_id' <<< "$EVENT_OBJ")
          echo "Previous Suite ID: $SUITE_ID"
          echo "SUITE_ID=$SUITE_ID" >> "$GITHUB_ENV"

          echo "ARTIFACT_NAME=$ZIP_FILENAME" >> "$GITHUB_ENV"

          ARTIFACT_IDS=$(gh api "/repos/$OWNER/$REPO/actions/artifacts" \
            --jq [".artifacts.[] |
            select(.workflow_run.id==$CURRENT_JOB_ID) |
            select(.expired==false) | {id, name}"]
          )
          echo "ARTIFACT_IDS=$ARTIFACT_IDS" >> "$GITHUB_ENV"

          echo "Head SHA: ${{ github.event.head_sha }}"

      - name: Get upload zip artifact id
        run: |
          echo "ARTIFACT_ID=$(python -c "import os, json; 
          [print(str(art['id'])) for art in json.loads(
          os.getenv('ARTIFACT_IDS').replace('\'', '\"'))
          if art['name'] == os.getenv('ARTIFACT_NAME') ]")" >> "$GITHUB_ENV"

          echo "The ARTIFACT ID: $ARTIFACT_ID"

      - name: Save the public artifact URL into an artifact
        shell: bash
        env:
          ARTIFACT_URL: "${{ github.server_url }}/${{ github.repository }}/suites/${{ env.SUITE_ID }}/artifacts/${{ env.ARTIFACT_ID }}"
        run: |
          echo $ARTIFACT_URL > artifact_url.txt

      - name: Upload the url text file artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact_url
          path: ./artifact_url.txt
